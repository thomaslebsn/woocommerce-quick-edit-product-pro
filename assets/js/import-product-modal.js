/**
 * Backbone Application File
 * @internal Obviously, I've dumped all the code into one file. This should probably be broken out into multiple
 * files and then concatenated and minified but as it's an example, it's all one lumpy file.
 * @package addProductModalBox.backbone_modal
 */

/**
 * @type {Object} JavaScript namespace for our application.
 */
var importProductModalBox = {
	backbone_modal: {
		__instance: undefined
	}
};

/**
 * Primary Modal Application Class
 */
var that = null,
    meta_image_frame;

importProductModalBox.backbone_modal.Application = Backbone.View.extend(
	{
		id: "import_product_backbone_modal_dialog",
		events: {
			"click .backbone_modal-close": "closeModal",
			"click #btn-cancel-import": "closeModal",
			"click .navigation-bar a": "doNothing"
		},

		/**
		 * Simple object to store any UI elements we need to use over the life of the application.
		 */
		ui: {
			nav: undefined,
			content: undefined,
            tabImportProduct:{
                btnImportProduct:undefined,
                inputFile:undefined,
                formImport:undefined,
                container:undefined,
                fileInputWrapper:undefined
            },
            tabCreateTemplate:{
                btnCreateTemplate:undefined,
                container:undefined,
                selectAttribute: undefined,
                test: undefined
            },
            error:{
                elementErrorMessage:undefined,
                errorMessage:{
                    invalidFileType: initialize_variables.message_show.import_product_invalid_file_type,
                    emptyInputFile: initialize_variables.message_show.import_product_empty_input_file
                }
            }
		},

        that: undefined,

        allowedFileTypes: ['xls', 'xlsx'],

        canImport: true,

		/**
		 * Container to store our compiled templates. Not strictly necessary in such a simple example
		 * but might be useful in a larger one.
		 */
		templates: {},

		/**
		 * Instantiates the Template object and triggers load.
		 */
		initialize: function () {
			"use strict";
			_.bindAll( this, 'render', 'preserveFocus', 'closeModal', 'saveModal', 'doNothing' );
			this.initialize_templates();
			this.render();
		},


		/**
		 * Creates compiled implementations of the templates. These compiled versions are created using
		 * the wp.template class supplied by WordPress in 'wp-util'. Each template name maps to the ID of a
		 * script tag ( without the 'tmpl-' namespace ) created in template-data.php.
		 */
		initialize_templates: function () {
			this.templates.window = wp.template( "import-product-backbone-modal-window" );
			this.templates.backdrop = wp.template( "add-product-backbone-modal-backdrop" );
			this.templates.menuItem = wp.template( "add-product-backbone-modal-menu-item" );
			this.templates.menuItemSeperator = wp.template( "add-product-backbone-modal-menu-item-separator" );
		},

		/**
		 * Assembles the UI from loaded templates.
		 * @internal Obviously, if the templates fail to load, our modal never launches.
		 */
		render: function () {
			"use strict";

			// Build the base window and backdrop, attaching them to the $el.
			// Setting the tab index allows us to capture focus and redirect it in Application.preserveFocus
			this.$el.attr( 'tabindex', '0' )
				.append( this.templates.window() )
				.append( this.templates.backdrop() );

			// Save a reference to the navigation bar's unordered list and populate it with items.
			// This is here mostly to demonstrate the use of the template class.
			this.ui.nav = this.$( '.navigation-bar nav ul' )
                .append( this.templates.menuItem( {url: "#tab-create-template-product", name: "Create Template Import Product"} ) )
                .append( this.templates.menuItemSeperator() )
				.append( this.templates.menuItem( {url: "#tab-import-product", name: "Importing Product"} ) )
                .append( this.templates.menuItemSeperator() )
            ;

			// The l10n object generated by wp_localize_script() should be available, but check to be sure.
			// Again, this is a trivial example for demonstration.
			if ( typeof importProductModalBox_backbone_modal_l10n === "object" ) {
				this.ui.content = this.$( '.backbone_modal-main article' )
					.append( "<p>" + importProductModalBox_backbone_modal_l10n.replace_message + "</p>" );
			}

			// Handle any attempt to move focus out of the modal.
			jQuery( document ).on( "focusin", this.preserveFocus );

			// set overflow to "hidden" on the body so that it ignores any scroll events while the modal is active
			// and append the modal to the body.
			// TODO: this might better be represented as a class "modal-open" rather than a direct style declaration.
			jQuery( "body" ).css( {"overflow": "hidden"} ).append( this.$el );

			// Set focus on the modal to prevent accidental actions in the underlying page
			// Not strictly necessary, but nice to do.
			this.$el.focus();

            this.ui.error.elementErrorMessage = '<span class="help-block error"></span>';

            this.ui.tabImportProduct.container = this.$('#import_products');

            this.ui.tabImportProduct.formImport = this.$('#form-import-products');

            this.ui.tabImportProduct.btnImportProduct = this.$('#btn-import-product');

            this.ui.tabImportProduct.inputFile = this.$('#input-file-importing');

            this.ui.tabImportProduct.inputFile.bootstrapFileInput();

            this.ui.tabImportProduct.fileInputWrapper = this.ui.tabImportProduct.container.find('.file-input-wrapper');

            this.ui.tabCreateTemplate.container = this.$('#form-create-excel-template-import');

            this.ui.tabImportProduct.container.off('change','#input-file-importing').on('change', '#input-file-importing', this.onChangeInputFileImport);

            this.ui.tabImportProduct.container.off('click','#btn-import-product').on('click', '#btn-import-product', this.importProductClick);

            this.ui.nav.children('.nav-item').off('click').on('click', this.navItemClick);

            this.ui.tabCreateTemplate.container.off('change','.select-product-type').on('change','.select-product-type', this.changeProductType);

            jQuery('.tab-content-block').not(':first').hide();

            window.fntQEPP.formExcelTemplateSetting.renderForm();
            this.ui.tabCreateTemplate.selectAttribute = this.ui.tabCreateTemplate.container.find('.selectedAttribute');
            this.ui.tabCreateTemplate.selectAttribute.addClass('hidden');

            that = this;
		},

        changeProductType: function (e) {
            var productType = jQuery(e.currentTarget).val();
            var selectAttribute = that.ui.tabCreateTemplate.container.find('.selectedAttribute');
            if(productType == 'variable'){
                if(selectAttribute.hasClass('hidden')){
                    selectAttribute.removeClass('hidden');
                }
            }else{
                if(!selectAttribute.hasClass('hidden')){
                    selectAttribute.addClass('hidden');
                }
            }
        },

        displayErrorMessage: function (errorMessage) {
            that.ui.tabImportProduct.fileInputWrapper.addClass('has-error');
            that.ui.tabImportProduct.fileInputWrapper.append(jQuery(that.ui.error.elementErrorMessage).text(errorMessage));
        },

        resetErrorMessage: function () {
            that.ui.tabImportProduct.fileInputWrapper.find('.error').remove();
            that.ui.tabImportProduct.fileInputWrapper.removeClass('has-error');
        },

        validateFileUpload: function(){
            var fileName = jQuery('#input-file-importing').val();
            if(fileName == null || fileName.length === 0){
                that.displayErrorMessage(that.ui.error.errorMessage.emptyInputFile);
                return false;
            }
            var fileExt = fileName.split('.').pop();
            var isInvalidFileType = jQuery.inArray(fileExt,that.allowedFileTypes);
            if(isInvalidFileType < 0){
                that.displayErrorMessage(that.ui.error.errorMessage.invalidFileType);
                return false;
            }
            return true;
        },

        onChangeInputFileImport: function(e){
            var selectedFileImport = jQuery(e.currentTarget).val().split('\\').pop();
            if(selectedFileImport.length === 0){
                selectedFileImport = 'Choose a file for importing...';
            }
            jQuery('.file-input-wrapper span:first').text(selectedFileImport);
            that.resetErrorMessage();
            that.validateFileUpload();
            return false;
        },

        importProductClick: function (e) {
            // validation
            e.preventDefault();
            that.resetErrorMessage();
            that.canImport = that.validateFileUpload();

            if(!that.canImport){
                return false;
            }
            // show loading when importing
            window.fntQEPP.Core.showLoading();
            // form submit jquery
            that.ui.tabImportProduct.formImport.submit();
            return false;
        },

        navItemClick: function(e){
            var tabID = jQuery(e.currentTarget).find('a').attr("href");
            jQuery('.tab-content-block').hide();
            jQuery(tabID).show();
            return false;
        },

		/**
		 * Ensures that keyboard focus remains within the Modal dialog.
		 * @param e {object} A jQuery-normalized event object.
		 */
		preserveFocus: function ( e ) {
			"use strict";
			if ( this.$el[0] !== e.target && ! this.$el.has( e.target ).length ) {
				this.$el.focus();
			}
		},

		/**
		 * Closes the modal and cleans up after the instance.
		 * @param e {object} A jQuery-normalized event object.
		 */
		closeModal: function ( e ) {
			"use strict";

			e.preventDefault();
			this.undelegateEvents();
			jQuery( document ).off( "focusin" );
			jQuery( "body" ).css( {"overflow": "auto"} );
			this.remove();
			importProductModalBox.backbone_modal.__instance = undefined;
		},

		/**
		 * Responds to the btn-ok.click event
		 * @param e {object} A jQuery-normalized event object.
		 * @todo You should make this your own.
		 */
		saveModal: function ( e ) {
			"use strict";
            this.handleAddProductRowItem(e);
            this.closeModal( e );
		},

		/**
		 * Ensures that events do nothing.
		 * @param e {object} A jQuery-normalized event object.
		 * @todo You should probably delete this and add your own handlers.
		 */
		doNothing: function ( e ) {
			"use strict";
			e.preventDefault();
		}

	} );

jQuery( function ( $ ) {
	"use strict";
	/**
	 * Attach a click event to the meta-box button that instantiates the Application object, if it's not already open.
	 */
	$( ".import-product-backbone-modal" ).off('click').on('click', function ( e ) {
        var scrollTop = $(window).scrollTop();
		e.preventDefault();
        if(!window.fntQEPP.Core.readyHandler){
            return false;
        }
        if(productModifying){
            if(window.fntQEPP.ProductListHandler.confirmRedirectPage()){
                if ( importProductModalBox.backbone_modal.__instance === undefined ) {
                    importProductModalBox.backbone_modal.__instance = new importProductModalBox.backbone_modal.Application();
                }
            }
        }else{
            if ( importProductModalBox.backbone_modal.__instance === undefined ) {
                importProductModalBox.backbone_modal.__instance = new importProductModalBox.backbone_modal.Application();
            }
        }
        $(window).scrollTop(scrollTop);
	} );
} );